{"ast":null,"code":"// Assuming you're using Axios for making HTTP requests\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:8080/api'; // Update with your backend URL\n\nconst UserService = {\n  register: async userData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/register`, userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  login: async userData => {\n    try {\n      const response = await axios.post(`${BASE_URL}/login`, userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default UserService;","map":{"version":3,"names":["axios","BASE_URL","UserService","register","userData","response","post","data","error","login"],"sources":["D:/TaskManagementFrontEnd/task/src/services/UserService.js"],"sourcesContent":["// Assuming you're using Axios for making HTTP requests\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:8080/api'; // Update with your backend URL\r\n\r\nconst UserService = {\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/register`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  login: async (userData) => {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/login`, userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default UserService;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,QAAS,WAAU,EAAEG,QAAQ,CAAC;MACnE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACDC,KAAK,EAAE,MAAOL,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,QAAS,QAAO,EAAEG,QAAQ,CAAC;MAChE,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}