{"ast":null,"code":"var _jsxFileName = \"D:\\\\TaskManagementFrontEnd\\\\task\\\\src\\\\components\\\\AddTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport './AddTask.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddTask = () => {\n  _s();\n  const [taskName, setTaskName] = useState('');\n  const [taskDescription, setTaskDescription] = useState('');\n  const [taskId, setTaskId] = useState('');\n  const [issuedDate, setIssuedDate] = useState('');\n  const [status, setStatus] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post('http://localhost:8080/api/tasks', {\n        id: taskId,\n        name: taskName,\n        description: taskDescription,\n        issuedDate: issuedDate,\n        status: status\n      });\n      setIsSubmitted(true); // Set isSubmitted to true after successful task addition\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n  const handleBack = () => {\n    setIsSubmitted(false); // Reset isSubmitted to false\n    navigate('/dashboard'); // Navigate to the dashboard page\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-task-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-task-wrapper\",\n      children: isSubmitted ?\n      /*#__PURE__*/\n      // Conditionally render success message\n      _jsxDEV(\"h2\", {\n        style: {\n          color: '#fff'\n        },\n        children: \"Task Added Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: '#fff'\n          },\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleBack,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTask, \"qfPatCB7wb2o/F3/pPOwQ4h835Y=\", false, function () {\n  return [useNavigate];\n});\n_c = AddTask;\nexport default AddTask;\nvar _c;\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"names":["React","useState","useNavigate","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","AddTask","_s","taskName","setTaskName","taskDescription","setTaskDescription","taskId","setTaskId","issuedDate","setIssuedDate","status","setStatus","isSubmitted","setIsSubmitted","navigate","handleSubmit","e","preventDefault","post","id","name","description","error","console","handleBack","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","_c","$RefreshReg$"],"sources":["D:/TaskManagementFrontEnd/task/src/components/AddTask.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './AddTask.css';\r\n\r\nconst AddTask = () => {\r\n  const [taskName, setTaskName] = useState('');\r\n  const [taskDescription, setTaskDescription] = useState('');\r\n  const [taskId, setTaskId] = useState('');\r\n  const [issuedDate, setIssuedDate] = useState('');\r\n  const [status, setStatus] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('http://localhost:8080/api/tasks', {\r\n        id: taskId,\r\n        name: taskName,\r\n        description: taskDescription,\r\n        issuedDate: issuedDate,\r\n        status: status\r\n      });\r\n      setIsSubmitted(true); // Set isSubmitted to true after successful task addition\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setIsSubmitted(false); // Reset isSubmitted to false\r\n    navigate('/dashboard'); // Navigate to the dashboard page\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-task-container\">\r\n      <div className=\"add-task-wrapper\">\r\n        {isSubmitted ? ( // Conditionally render success message\r\n          <h2 style={{ color: '#fff' }}>Task Added Successfully</h2>\r\n        ) : (\r\n          <>\r\n            <h2 style={{ color: '#fff' }}>Add Task</h2>\r\n            <form onSubmit={handleSubmit}>\r\n              {/* Form inputs */}\r\n              <button type=\"submit\">Add Task</button>\r\n              <button onClick={handleBack}>Back</button>\r\n            </form>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}